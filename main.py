from buttons import *
from config import *
import html
from database import insert_data, get_data, get_all_vips, add_vip, get_username_by_id
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage


bot = Bot(token=TELEGRAM_TOKEN) # –¢–æ–∫–µ–Ω
dp = Dispatcher(bot, storage=MemoryStorage())
yoomoney_client = Client(YOOMONEY_TOKEN)


class VIP:
    users = list()


    async def update_vip_users():
        VIP.users = await get_all_vips()

    async def add_vip_user(id):
        VIP.users = await add_vip(id)

class User(StatesGroup):
    write = State()
    answer = State()

class Payment(StatesGroup):
    pay = State()
    check = State()


async def check_payment(label):
    history = yoomoney_client.operation_history()
    print(f"\nLabel: {label}")
    for operation in history.operations:
        if operation.label == label and operation.status == "success":
            print(f"–ü–õ–ê–¢–Å–ñ {operation.amount} –£–°–ü–ï–®–ù–û –ü–†–û–®–Å–õ")
            return True
            break
    else:
        print("–ü–õ–ê–¢–Å–ñ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù")
        return False

async def get_username(tmp_username):
    if "none" == str(tmp_username).lower():
        username = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    else:
        username = f"@{tmp_username}"
    return username

async def on_startup(_):
    print("–ë–æ—Ç –æ–Ω–ª–∞–π–Ω")
    await VIP.update_vip_users()

@dp.message_handler(commands="start", state='*')
async def commands_start(message, state=FSMContext):
    user_id = message.from_user.id
    name_user = message.from_user.first_name
    username = await get_username(message.from_user.username)
    await insert_data(user_id, name_user, username)
    if len(message.text.split()) > 1: # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        unique_code = message.text.split()[1]
        if unique_code.isdigit():
            unique_code = int(unique_code)
        if unique_code == user_id:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏ —Å–µ–±–µ!", reply_markup=removeButton)
            await state.finish()
        else:
            await message.answer("üí¨–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, \
                                 –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\n‚úçüèª –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=cancelMenu)
            await User.write.set()
            async with state.proxy() as data:
                data['other_id'] = unique_code
    else:
        await message.answer(f"üîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{LINK}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                             reply_markup=removeButton, 
                             disable_web_page_preview=True)

@dp.message_handler(commands="support", state='*')
async def commands_support(message, state=FSMContext):
    await message.answer("<i>–ï—Å–ª–∏ —É –í–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å—é–¥–∞ -</i> @AnQSupport", parse_mode="HTML")
    await state.finish()

@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞ ‚ùå"), state=User.write)
async def user_write_cancel(message: types.Message, state):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è!", reply_markup=removeButton)
    await state.finish()

@dp.message_handler(state=User.write)
async def user_write(message: types.Message, state: FSMContext):
    text = html.escape(message.text)
    if len(text) < 4000:
        async with state.proxy() as data:
            other_id = data['other_id']
            user_id = message.from_user.id
            name_user = message.from_user.first_name
            username = await get_username(message.from_user.username)
            await insert_data(user_id, name_user, username)
            try:
                await bot.send_message(other_id, f"üì® <b>–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n{text}", parse_mode="HTML", reply_markup = await GetResultMenu(user_id))
                print(f"\n{username}({user_id}) -> {await get_username_by_id(other_id)}({other_id})\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n")

                await message.answer(f"<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\nüîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n\
{LINK}?start={message.from_user.id}\n\n\
–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", parse_mode="HTML", reply_markup=removeButton, disable_web_page_preview=True)
                
            except Exception as e:
                await message.answer("<i>–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</i>", parse_mode="HTML")
                print(f"\n–û—à–∏–±–∫–∞: {e}")
            await state.finish()
    else:
        await message.answer("<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –æ–±—ä—ë–º.</i>", parse_mode="HTML")

@dp.callback_query_handler(lambda c: "HU" in c.data, state="*")
async def WhoIsIt(call, state):
    user_id = call.from_user.id
    if user_id in VIP.users:
        await call.answer("–ß–µ–ª–æ–≤–µ–∫")
        name, username = await get_data(int(call.data[2:]))
        name = html.escape(name)
        username = html.escape(username)
        await bot.send_message(user_id, f"<b>–î–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ:</b>\n\n<b>–ò–º—è -</b> {name}\n<b>–Æ–∑–µ—Ä–Ω–µ–π–º -</b> {username}", parse_mode="HTML")
    else:
        await call.answer("–ü–æ–∫—É–ø–∫–∞ VIP")
        await bot.send_message(user_id, "<b>–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ç–∞–∫ –¥—É–º–∞–µ—Ç –∏ –ø–∏—à–µ—Ç?</b>\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ <b>VIP</b>üëë\n\n<b>–¶–µ–Ω–∞:</b> <s>99 —Ä—É–±–ª–µ–π</s> <b>59 —Ä—É–±–ª–µ–π</b> (-40%)\n<b>–°—Ä–æ–∫: –ù–ê–í–°–ï–ì–î–ê</b>", 
                               parse_mode="HTML", 
                               reply_markup = await GetPaymentsMenu(user_id))

@dp.callback_query_handler(lambda c: "check" == c.data, state="*")
async def CheckPayment(call, state):
    user_id = call.from_user.id
    if user_id not in VIP.users:
        label = str(user_id)
        if await check_payment(label):
            await VIP.add_vip_user(user_id)
            await call.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            await bot.edit_message_text("<b>–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP-—Å—Ç–∞—Ç—É—Åüëë</b>\n\n<b>–¢–µ–ø–µ—Ä—å –í—ã –≤–∏–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–ø–∏—Å–∞–ª!</b>", 
                                        chat_id=user_id, 
                                        message_id=call.message.message_id, 
                                        parse_mode="HTML")
            print(f"{user_id} –¥–æ–±–∞–≤–ª–µ–Ω VIP\n")
        else:
            await call.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
    else:
        await call.answer("–í—ã —É–∂–µ VIP")

@dp.message_handler(Text("–û—Ç–º–µ–Ω–∞ ‚ùå"), state=User.answer)
async def user_write_cancel(message: types.Message, state):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞!", reply_markup=removeButton)
    await state.finish()

@dp.callback_query_handler(lambda c: "AN" in c.data, state="*")
async def answer(call, state):
    user_id = call.from_user.id
    await call.answer("–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await bot.send_message(user_id, "<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>", reply_markup=cancelMenu, parse_mode="HTML")
    await User.answer.set()
    async with state.proxy() as data:
        data['other_id'] = call.data[2:]

@dp.message_handler(state=User.answer)
async def user_answer(message: types.Message, state: FSMContext):
    text = html.escape(message.text)
    if len(text) < 4000:
        async with state.proxy() as data:
            other_id = int(data['other_id'])
            user_id = message.from_user.id
            name_user = message.from_user.first_name
            username = await get_username(message.from_user.username)
            await bot.send_message(other_id, f"<b>–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∏–ª–∏:</b>\n\n{text}", parse_mode="HTML")
            print(f"\n{username}({user_id}) -> {await get_username_by_id(other_id)}({other_id})\n–û—Ç–≤–µ—Ç: {text}\n")
            await message.answer(f"<b>–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\nüîó –í–æ—Ç —Ç–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{LINK}?start={message.from_user.id}\n\n–û–ø—É–±–ª–∏–∫—É–π –µ—ë –∏ –ø–æ–ª—É—á–∞–π –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", 
                                 parse_mode="HTML", 
                                 reply_markup=removeButton, 
                                 disable_web_page_preview=True)
            await insert_data(user_id, name_user, username)
            await state.finish()
    else:
        await message.answer("<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –æ–±—ä—ë–º.</i>", parse_mode="HTML")


# –∞–¥–º–∏–Ω–∫–∞ #
@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID, commands="add_vip", state="*")
async def add_new_vip_users(message: types.Message, state: FSMContext):
    text = message.text
    if len(text.split(" ")) == 2:
        _, user_id = text.split(" ")
        if user_id.isdigit():
            try:
                await VIP.add_vip_user(int(user_id))
                await message.answer("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
            except:
                await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        else:
            await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)